<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-14T22:51:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>精英日课笔记</title>
    <link href="http://yoursite.com/2018/04/15/%E7%B2%BE%E8%8B%B1%E6%97%A5%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/15/精英日课笔记/</id>
    <published>2018-04-15T08:29:57.000Z</published>
    <updated>2018-05-14T22:51:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日课001-失败不是成功之母，成功才是成功之母"><a href="#日课001-失败不是成功之母，成功才是成功之母" class="headerlink" title="日课001 失败不是成功之母，成功才是成功之母"></a>日课001 失败不是成功之母，成功才是成功之母</h2><p>过去的失败经历，对你未来的成功，一点帮助都没有。一个一直失败的人，将来最大的可能性也许是习惯性<br>地再次失败，还不如新人。</p><p>“从失败中吸取教训”，可没有那么容易。最好的失败是小失败或者别人的失败，失败的价值是给我们提供<br>反馈，而反馈要想有效，必须对事不对人!</p><h2 id="日课002-哪怕你兢兢业业地干活，大部分工作也被浪费了"><a href="#日课002-哪怕你兢兢业业地干活，大部分工作也被浪费了" class="headerlink" title="日课002 哪怕你兢兢业业地干活，大部分工作也被浪费了"></a>日课002 哪怕你兢兢业业地干活，大部分工作也被浪费了</h2><p>85%的工作没有价值。</p><ol><li>不要搞多任务、同时干几件事，要每次只干一件事 。<br>老老实实集中精力每次只把一件事干好，就是最有效率的做法。最有效率的工作方式是做完一个项目再做下<br>一个。</li><li>做什么事都要追求做完，完成一半没价值。<br>只做了一半的事，没有价值。为了创造价值而做事的人关注的不是这件事本身，而是结果，是把事做完。</li><li>一次就把事情做对<br>人脑就是这样，当时遇到问题当时解决很容易，过了一段时间之后，你已经回忆不起来当时的情况了，什么<br>都要重新搞，再来解决就非常麻烦。</li></ol><p>每次只做一件事，追求把事做完，最好第一次就做对。对个人来说这三个道理非常简单，但是让一个团队做<br>到这三点，却很不容易。</p><h2 id="日课003-要怎么说，别人才能听懂你的数据？"><a href="#日课003-要怎么说，别人才能听懂你的数据？" class="headerlink" title="日课003 要怎么说，别人才能听懂你的数据？"></a>日课003 要怎么说，别人才能听懂你的数据？</h2><p>数字不容易读懂，要用类比方式形象地说明数据。</p><p>在A环境发生X事件(想要强调的对象)，相当于在B环境发生Y事件(类比的对象)</p><h2 id="周末小议-因为个文化还跟我急了"><a href="#周末小议-因为个文化还跟我急了" class="headerlink" title="周末小议 因为个文化还跟我急了"></a>周末小议 因为个文化还跟我急了</h2><p>所谓“精英”，特别值得学习的一点，就是他知道现代人都是复杂的，而且能容忍人的复杂。他看一个人能 看到很多面，而且他只关注这个人最有价值的一面。他不会要求一个企业家不信气功大师，不会要求一个运 动员说话处处符合政治正确，也不会要求一个演员反台独——你只要在该对的地方对，就足够好了。</p><p>把人划分各种阵营，给人贴标签，竖起大旗来党同伐异，这些事情除非别有用心，绝非智者所为。在这个场 子上是对方辩友，在下一个场子上可能是队友;白天尖锐对立，晚上还能在一张桌子上喝酒，该合作还能合 作，这才是精英的做法。所以最高境界是根本就没情绪，可是有时候情绪很难控制。</p><h2 id="周末小议-因为个文化还跟我急了-1"><a href="#周末小议-因为个文化还跟我急了-1" class="headerlink" title="周末小议 因为个文化还跟我急了"></a>周末小议 因为个文化还跟我急了</h2><p>我们谈论任何问题，都坚持“对事不对人”?</p><p>所谓“精英”，特别值得学习的一点，就是他知道现代人都是复杂的，而且能容忍人的复杂。</p><h2 id="周末小议-周末小议-道德和道德"><a href="#周末小议-周末小议-道德和道德" class="headerlink" title="周末小议 周末小议 道德和道德"></a>周末小议 周末小议 道德和道德</h2><p>所谓ethic，严格的译法应该是“伦理”，或者“职业道德” —— <strong>它说的是外部社会对你的行为规范</strong>。很多职业都有自己的ethic要求，往往非常细致。Ethic，往往能形成一 套有明确条文的规章制度，就好像法规一样。一个没认真学过的人参加有关职业道德的科目考试，很可能是 通不过的。</p><p>所谓moral，<strong>是一个人自己对自己的要求</strong>。换句话说，就是我想在多大程度上做个好人?我认为怎么做才是 正义的?</p><p>在我看来，moral是个比ethic高级得多的词。遵守ethic，可能完全是出于害怕被惩罚，是被动的;而一个 有moral的人则是真诚的、主动的选择，体现了自由意志，更值得尊敬。</p><p>《龙与地下城》这个游戏很有意思，它用ethic做横坐标，用moral做纵坐标，给玩家划分了九大阵营:</p><table><thead><tr><th>–</th><th>–</th><th>–</th></tr></thead><tbody><tr><td>守序善良</td><td>中立善良</td><td>混乱善良</td></tr><tr><td>守序中立</td><td>绝对中立</td><td>混乱中立</td></tr><tr><td>守序邪恶</td><td>中立邪恶</td><td>混乱邪恶</td></tr></tbody></table><h5 id="ethic"><a href="#ethic" class="headerlink" title="ethic:"></a>ethic:</h5><ol><li>守序:遵纪守法，重视传统，服从权威</li><li>中立:如果我觉得这个规则有道理，或者对我有好处，我就遵守</li><li>混乱:崇尚个人自由，以破坏规则为乐<h5 id="moral"><a href="#moral" class="headerlink" title="moral:"></a>moral:</h5></li><li>善良:乐于帮助他人</li><li>中立:自己顾自己</li><li>邪恶:为了自己可以伤害他人</li></ol><p>也就是说一个自诩是好人的人，也可以无视社会伦理。在《龙与地下城》里，“圣徒”阵营的人就是守序善<br>良，“施恩者”阵营的人是中立善良，而“反抗者”阵营的人就是混乱善良。比如武侠小说里的很多人物，<br>就是混乱善良。<br>反过来说，一个遵纪守法的人也当然可以是坏人。</p><p></p><h2 id="日课004-大人物的坏毛病"><a href="#日课004-大人物的坏毛病" class="headerlink" title="日课004 大人物的坏毛病"></a>日课004 大人物的坏毛病</h2><p>做个谦逊和没脾气的人， 不利于成为大人物</p><p>如果你想从平凡的同事中脱颖而出，去做个大人物，你应该设法突出自己</p><p>谦逊其实是人的一种本能，甚至可以说是一种冲动:我们天生不愿 意做那些会让身边的人不喜欢的事</p><p>那你就必须克服自己的本能冲动，去做一些不受同辈欢迎的事情。</p><p>除了敢于把自己突出出来，你还得敢于向人提要求，尤其是向那些地位比你高的人提要求。</p><p>最好的求助，就是让人给你提建议。</p><p>寻找你跟对方的共同点</p><p>提要求，甚至要不惜打破规则。</p><p>这些敢于突出表现自己，敢于提要求，敢于打破规则的人，并不怎么在乎同辈的人怎么看他<br>们，他们只在乎高层。</p><p>他们并不是故意打破规则来树立形象，做 给别人看，或者蔑视规则—— 他们只不过是认为跟自己要做的大事相比，这些小规则不值得遵守。</p><p>为了脱颖而出，想要获得权势的人常常会使用一些不受同辈人欢迎的手段: o 表现自我，甚至自吹</p><ul><li>奉承上级</li><li>提出破格的要求</li><li>搞特例，违反一般规定</li></ul><p>而不被人喜欢，就是这么做的代价</p><h2 id="日课005-奥运会应该是该什么的？"><a href="#日课005-奥运会应该是该什么的？" class="headerlink" title="日课005 奥运会应该是该什么的？"></a>日课005 奥运会应该是该什么的？</h2><p>参加比赛就是为了赢。但是赢要赢得漂亮。</p><p>不管你的初衷是什么，这个东西一旦发展壮大起来，牵扯到 巨大利益，这个初衷就肯定无法保全了。</p><h2 id="日课006-表现出热情，别人才相信你是真干"><a href="#日课006-表现出热情，别人才相信你是真干" class="headerlink" title="日课006 表现出热情，别人才相信你是真干"></a>日课006 表现出热情，别人才相信你是真干</h2><p>你得有这样的热情，才能调动观众的热情。</p><p>到底有什么东西，能点燃你内心的激情?</p><p>演讲也好，做事也好，一定要有热情——<br>一种比你做的这件事本身更高的精神追求，这样别人才能相信你是真的在干，才能支持你愿意跟你一起干。</p><h2 id="日课007-权威的合法性从哪里来？"><a href="#日课007-权威的合法性从哪里来？" class="headerlink" title="日课007 权威的合法性从哪里来？"></a>日课007 权威的合法性从哪里来？</h2><p>格拉德威尔说，要想保证权威的合法性，你得做到三点。</p><ul><li>你管理的每一个下属，他的声音都必须能被你听到。</li><li>你指定的法规必须稳定，得有可预测性，明天的规定得跟今天差不多，不能朝令夕改。</li><li>执法必须公平—— 这意味着两点:首先是一视同仁，对这个人怎么要求，对那个人也得这么要求;其次是前后一致，不 能随机惩罚，今天这么干了没事儿，明天这么干了就受罚。</li></ul><p>你得让人知道你关心他们，他们的声音你能听到，你才有合法性。</p><p>你必须得克制自己的本能冲动，才能赢得权威。</p><h2 id="日课008-信仰值多少钱"><a href="#日课008-信仰值多少钱" class="headerlink" title="日课008 信仰值多少钱"></a>日课008 信仰值多少钱</h2><p>实验的价值就在于它不是听人怎么说，而是看人怎么做</p><h2 id="周末小议-文章分类有奖征名"><a href="#周末小议-文章分类有奖征名" class="headerlink" title="周末小议 文章分类有奖征名"></a>周末小议 文章分类有奖征名</h2><h2 id="周末小议-小小年纪去留学，可能是悲剧"><a href="#周末小议-小小年纪去留学，可能是悲剧" class="headerlink" title="周末小议 小小年纪去留学，可能是悲剧"></a>周末小议 小小年纪去留学，可能是悲剧</h2><p>教育是个系统工程，所有研究都指出家庭的影响至关重要!</p><h2 id="日课009-今朝有酒今朝醉，也是一种理性"><a href="#日课009-今朝有酒今朝醉，也是一种理性" class="headerlink" title="日课009 今朝有酒今朝醉，也是一种理性"></a>日课009 今朝有酒今朝醉，也是一种理性</h2><p>所有研究都表明，能够从长远打算和推迟享乐，是通往长久幸福生活的必备素质 。</p><p>斯坦福棉花糖实验，实验者给小孩一个棉花糖，说我现在要出去一下，如果你能等 到我回来再吃这个棉花糖，我就会再给你一个。所有小孩都喜欢棉花糖。有的小孩能克服暂时的欲望等一会 儿得到更多，有的小孩忍不住就把棉花糖吃了。结果过上多少年再看，那些当初忍住没吃棉花糖的小孩，不 论学习成绩还是生活质量都比那些忍不住的小孩要好很多。</p><p>The Rational Animal: How Evolution Made Us Smarter Than We Think<br>(《理性动物:进化让我们比我们想象的更聪明》作者 Douglas T. Kenrick and Vladas Griskevicius)</p><p>人的很多行为看似非理性，其实是理性的</p><p>生命史理论说，动物们的积累和花费有两种不同的策略。 像大象这样的动物，食物充足而且没有天敌，可以无忧无虑地生活好几十年，所以它的策略就是“慢策略”<br>:花很多时间积累，生育很少。<br>而绝大多数动物没有这么幸运，一般都是很早就性成熟，然后马上就大量生育，然后可能很快就被捕杀，寿 命很短也就死了。这就是“快策略”。</p><p>更进一步，生命史理论认为，在同一种族之内，也有快策略和慢策略的区别。人就是这样。</p><p>今天运气好得到 一块糖，你会把它留到明天吗?</p><p>换句话说，孩子能不能推迟享乐，不仅仅跟孩子有关，也跟你这个环境有关，而且他能够迅速适应新环境。</p><p>我们通常认为细水长流才是安身立命之本，而有人追求的就是那短暂的灿烂。而且他们是有道理的。</p><p>1.教育小孩一定要给他一个稳定的环境。偶然有什么特别好吃的不寻常的东西也不要一次吃完，要分几次慢<br>慢吃。高兴了不要连着几天光玩不学习，不高兴了也不要连着好几天不让玩。<br>2.看似荒唐的行为，背后可能有不得已的苦衷。表面上人人有自由意志，其实身上都不知道背着什么基因和 环境的枷锁——有的人能战胜这些枷锁，他们就是英雄。</p><h2 id="日课010-总统、CEO、好学区：到底是你们厉害还是天气好"><a href="#日课010-总统、CEO、好学区：到底是你们厉害还是天气好" class="headerlink" title="日课010 总统、CEO、好学区：到底是你们厉害还是天气好"></a>日课010 总统、CEO、好学区：到底是你们厉害还是天气好</h2><p>现在有很多研究都认为中国历史上的朝代兴亡跟皇帝本人的能力其实关系不 大，但是跟气候变化关系很大。</p><p>一个系统如果是比较稳定的，那么领导人能起的作用就很小。</p><p>有志于成就一番领袖霸业的人，应该去混乱的地方。</p><h2 id="日课011-目标很丰满，不确定性很骨感"><a href="#日课011-目标很丰满，不确定性很骨感" class="headerlink" title="日课011 目标很丰满，不确定性很骨感"></a>日课011 目标很丰满，不确定性很骨感</h2><p>那些找到自己的使命，明确知道自己该干什么，而且还知道该怎么干 的人，其实是特别幸福的少数人。</p><p>但是哪怕是从纯工作角度看，这些野心勃勃的少数人，也不应该制定特别明确的目标，因为计划<br>  没有变化快。</p><p>更高级的管理方法，是充分听取第一线的声音，随时调整目标，追求灵活多变。</p><p>你到底是为了把事情做好，还是为了满足自己的心理需求?</p><p>有目标，固然幸福;能容纳乃至拥抱不确定性，才是大智慧。</p><h2 id="日课012-自恋者的内心"><a href="#日课012-自恋者的内心" class="headerlink" title="日课012 自恋者的内心"></a>日课012 自恋者的内心</h2><p>自恋其实有两种。一种是浮夸式的，抓住一切机会吹嘘自己;一种是容易受伤式的，自己 有很多敏感词，别人一个不经意提到他就很受伤。</p><p><strong>自恋不是出于自信，而恰恰是出于不自信。</strong></p><p>自恋狂症状其实是因为自信程度太低，想要获得别人的关 注，希望别人的肯定能给自己带来自信。</p><p>圣人告诉我们要多谈事儿少谈人，多夸别人少谈自己，因为谈自己是不 礼貌的。知道了这个研究，我们就知道了为什么谈自己是不礼貌的—— <strong>因为从神经科学角度，谈自己是出于生理冲动。在人前暴露生理冲动，总是不礼貌的。</strong></p><h2 id="日课013-有些事我们不想让机器干"><a href="#日课013-有些事我们不想让机器干" class="headerlink" title="日课013 有些事我们不想让机器干"></a>日课013 有些事我们不想让机器干</h2><p>有没有什么事情，哪怕机器也能做，甚至能做得比人还好，但我们还是希望找个真实的人来做的?</p><p>人有这么一种偏见，喜欢过高评价“人与人面对面交往”这个行为，而对抽象数据不怎么买账。</p><p>人 本质上是个社交动物。</p><p>人工智能再怎么发达，我们还是要求:</p><ol><li>最重要的决定是由人做出的。如果中国要对哪国宣战，我们要求这个命令是人下达的，在这个问题上 我们不可能听从人工智能的指挥，我们不可能把核按钮交给人工智能。人说了算，不能让机器说了算 。</li><li>我们喜欢什么想要什么，这个想法随时都在变，我们无法给人工智能一个清晰的目标，所以有些事儿 还是让人自己解决比较好——因为我们有时候自己都不知道要“解决”的是什么。</li><li>也是最重要的一点，我们更愿意跟人打交道。</li></ol><p>所以想让别人放着机器不用用你，最好的办法就是表现出“人味儿”。</p><p>人的感情需求有多么强烈—— 机器人虽然方便，如果能来一个真人那就更好了。说宅男整天对着电脑打游戏不需要社交的人，可能不理解 宅男:游戏恰恰是模拟社交——为什么网络游戏比单机游戏好玩?因为网络游戏是跟真人一起玩啊!</p><p>怎么才能让自己更“人性化”呢?</p><ul><li>跟客户建立个人关系，不要只谈利益</li><li>衣着打扮、说话语言彰显个性</li><li>一个团队要有私下的个人互动，要有“化学反应”</li><li>作报告不要把数字直接摆在别人面前，得发挥想象力把这些数字形象化(参见本专栏前面的文章《要 怎么说，别人才能听懂你的数字?》)</li><li>逢年过节给群众送温暖</li><li>关键时刻站出来调动周围人的情绪</li><li>出了事主动承担责任</li><li>表态支持你支持的人<pre><code>Page 224 of 5028</code></pre></li><li>发现别人身上的亮点，互相吹捧</li><li>面对敌人同仇敌忾</li></ul><h2 id="周末小议"><a href="#周末小议" class="headerlink" title="周末小议"></a>周末小议</h2><h2 id="周末小议-速读"><a href="#周末小议-速读" class="headerlink" title="周末小议 速读"></a>周末小议 速读</h2><p>进入短期记忆(内存)容易，进入长期 记忆(硬盘)可能困难。</p><p>这就体现了笔记的作用，如果读完之后马上回忆一下读过的内容，记记笔记，肯定是更容易记住。</p><p>我敢说阅读的最高境界是练成高速和集中注意力状态下的主动阅读，把眼球运用自如，随时提速降速。看到<br>熟悉的内容就快速扫过，看到新鲜的东西就慢慢体会。<br>在这种情况下真正决定阅读速度的不是书的媒介和眼睛，而是你自己以前读过多少书。</p><h2 id="日课014-企业家思维VS雇员思维"><a href="#日课014-企业家思维VS雇员思维" class="headerlink" title="日课014 企业家思维VS雇员思维"></a>日课014 企业家思维VS雇员思维</h2><p>企业家”(entrepreneuer)和“企业主”(business owner)其实是两个含义很不一样的词，二者之间的区别并不在于公司的大小，企业家”，必须有点精神追求。Mad Genius: A Manifesto for Entrepreneurs，标题的意思是“疯狂的天才:企业家宣言”。作者 Randy Gage</p><p>作者说，世界上大多数人浑浑噩噩，对身边不合理的事物安之若素，其思维方式可以称之为“畜群思维”— —他这个词太难听，我们还是用一个好听点的，叫“雇员思维”。与之相对的，则是“企业家思维”。</p><p>而企业家思维，则是对现状不但不满，而且不服!我不管别人怎么想，我就认为这事不应该这么办，我非得 改变。换句话说，这两种思维的区别就在于<strong>前者被动，后者主动</strong>。</p><p>想法才是企业家创业的核心，是想象一种不同的可能性。企业家的任务不是问消费者想要什么，而是替消费者决定他们应该要什么!</p><p>并不一定是你非得自己拥有一个企业才需要“企业家思维”，每个人都应该有一点企业家思维。</p><table><thead><tr><th>目标和观点</th><th>小企业主</th><th>企业家</th></tr></thead><tbody><tr><td>1. 首要驱动力</td><td>谋生</td><td>改变世界</td></tr><tr><td>2. 个人财务目标</td><td>正常收入</td><td>让公司升值</td></tr><tr><td>3. 职业目标</td><td>自我雇佣</td><td>财务自由</td></tr><tr><td>4. 金融策略</td><td>贷款</td><td>找人投资</td></tr><tr><td>5. 业务策略</td><td>增加销售额</td><td>提供价值</td></tr><tr><td>6. 核心资产</td><td>房产和库存</td><td>员工和客户</td></tr><tr><td>7. 风险模式</td><td>稳定</td><td>勇于失败</td></tr><tr><td>8. 给雇员的报酬</td><td>市场水平或者低于市场水平</td><td>愿意花大价钱请一流天才</td></tr><tr><td>9. 工作环境</td><td>家里或者离家近的地方</td><td>增长快节奏快的地方</td></tr><tr><td>10. 投资策略</td><td>投资自己的公司</td><td>插手到别人的企业里去投资</td></tr><tr><td>11. 每天干什么</td><td>日常管理</td><td>战略、增长、合作</td></tr><tr><td>12. 工作风格</td><td>长期的重复性的工作</td><td>短期的、一个项目干完马上去干别的，永远创业</td></tr></tbody></table><p>雇员适应世界，企业主占世界的便宜，企业家改变世界。</p><h2 id="日课015-委婉语如内衣"><a href="#日课015-委婉语如内衣" class="headerlink" title="日课015 委婉语如内衣"></a>日课015 委婉语如内衣</h2><p></p><p>– end –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日课001-失败不是成功之母，成功才是成功之母&quot;&gt;&lt;a href=&quot;#日课001-失败不是成功之母，成功才是成功之母&quot; class=&quot;headerlink&quot; title=&quot;日课001 失败不是成功之母，成功才是成功之母&quot;&gt;&lt;/a&gt;日课001 失败不是成功之母，成功
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cpp Aop</title>
    <link href="http://yoursite.com/2018/02/09/Cpp-Aop/"/>
    <id>http://yoursite.com/2018/02/09/Cpp-Aop/</id>
    <published>2018-02-09T07:03:57.000Z</published>
    <updated>2018-02-09T08:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里有篇<a href="http://blog.csdn.net/lanchunhui/article/details/49952087" target="_blank" rel="noopener">文章</a>介绍了C++中使用装饰模式来实现AOP，装饰器类和被装饰类同为一个接口中继承，因此装饰器可以独立出来作为切片。</p><p><img src="../images/2018-02-09_15-53-17.png" alt=""></p><p>相关代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHello</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~IHello() &#123;&#125;       <span class="comment">// 将多态基类的析构函数声明为virtual</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">// 子类只有实现该接口才可进行对象的实例化工作</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> :</span><span class="keyword">public</span> IHello</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> _name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Hello(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name):_name(name)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello "</span> + _name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloDecorator</span> :</span><span class="keyword">public</span> IHello</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    IHello* _hello;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">addDecorator</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HelloDecorator(IHello* hello):_hello(hello)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; _hello-&gt;show();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloDecoratorA</span> :</span><span class="keyword">public</span> HelloDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addDecorator</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"logging in ..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HelloDecoratorA(IHello* hello):HelloDecorator(hello)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        addDecorator();</span><br><span class="line">        HelloDecorator::show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloDecoratorB</span> :</span><span class="keyword">public</span> HelloDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addDecorator</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"logging out ..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HelloDecoratorB(IHello* hello):_hello(hello)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HelloDecorator::show();</span><br><span class="line">        addDecorator();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>**)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// shard_ptr&lt;IHello&gt;统一使用基类智能指针，进行堆对象的管理</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;IHello&gt; hello(<span class="keyword">new</span> Hello(<span class="string">"Inside Zhang"</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;IHello&gt; helloA(<span class="keyword">new</span> HelloDecoratorA(hello.get()));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;IHello&gt; helloB(<span class="keyword">new</span> HelloDecoratorB(hello.get()));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;IHello&gt; helloAB(<span class="keyword">new</span> HelloDecoratorB(helloA.get()));</span><br><span class="line"><span class="comment">//  helloA-&gt;show();</span></span><br><span class="line"><span class="comment">//  helloB-&gt;show();</span></span><br><span class="line">    helloAB-&gt;show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外qicosmos(江南) 在其博客中提供了一个使用C++11的多模板参数的非侵入式AOP，相关博客点<a href="http://www.cnblogs.com/qicosmos/p/4772389.html" target="_blank" rel="noopener">这里</a>。</p><p>另有KondeU在其<a href="https://github.com/KondeU/AOP/" target="_blank" rel="noopener">github</a>上贴出了使用qicosmos介绍的技术实现的AOP，相对于qicosmos的版本提供了返回值的考虑，但是很可惜这个版本没法支持有void返回值函数。</p><p>这里我对其代码调整了一下，添加了aop类的特例化使其支持void返回值的函数，相关代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> aop</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NonCopyable</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        NonCopyable(<span class="keyword">const</span> NonCopyable &amp;) = <span class="keyword">delete</span>;                <span class="comment">// Deleted</span></span><br><span class="line">        NonCopyable &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> NonCopyable &amp;) = <span class="keyword">delete</span>;  <span class="comment">// Deleted</span></span><br><span class="line">        NonCopyable() = <span class="keyword">default</span>;                                  <span class="comment">// Available</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HAS_MEMBER(member)                                                             \</span></span><br><span class="line">                                                                                           \</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="class"><span class="keyword">struct</span> <span class="title">has_member_</span>##<span class="title">member</span> &#123;</span>                   \</span><br><span class="line">                                                                                           \</span><br><span class="line">    <span class="keyword">private</span>:                                                                               \</span><br><span class="line">                                                                                           \</span><br><span class="line">    template&lt;typename U&gt; static auto Check(int)                                        \</span><br><span class="line">    -&gt; <span class="keyword">decltype</span>(<span class="built_in">std</span>::declval&lt;U&gt;().member(<span class="built_in">std</span>::declval&lt;Args&gt;()...), <span class="built_in">std</span>::true_type());  \</span><br><span class="line">                                                                                           \</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function">false_type <span class="title">Check</span><span class="params">(...)</span></span>;                            \</span><br><span class="line">                                                                                           \</span><br><span class="line">    <span class="keyword">public</span>:                                                                                \</span><br><span class="line">                                                                                           \</span><br><span class="line">        <span class="keyword">enum</span> &#123; value = <span class="built_in">std</span>::is_same&lt;<span class="keyword">decltype</span>(Check&lt;T&gt;(<span class="number">0</span>)), <span class="built_in">std</span>::true_type&gt;::value &#125;;       &#125;</span><br><span class="line"></span><br><span class="line">    HAS_MEMBER(Before); <span class="comment">// Add Before aspect</span></span><br><span class="line">    HAS_MEMBER(After);  <span class="comment">// Add After aspect</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span> Func, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Aspect</span> :</span> NonCopyable</span><br><span class="line">    &#123;</span><br><span class="line">        Aspect(Func &amp;&amp; f) : m_func(<span class="built_in">std</span>::forward&lt;Func&gt;(f)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            aspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);  <span class="comment">// Run codes before core codes</span></span><br><span class="line">            m_ret = m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">            aspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);   <span class="comment">// Run codes after core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                !has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            aspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);  <span class="comment">// Run codes before core codes</span></span><br><span class="line">            m_ret = m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                !has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            m_ret = m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">            aspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);   <span class="comment">// Run codes after core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Invoke</span><span class="params">(Args &amp;&amp;... args, Head &amp;&amp; headAspect, Tail &amp;&amp;... tailAspect)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            headAspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);</span><br><span class="line">            Invoke(<span class="built_in">std</span>::forward&lt;Args&gt;(args)..., <span class="built_in">std</span>::forward&lt;Tail&gt;(tailAspect)...);</span><br><span class="line">            headAspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Ret <span class="title">GetReturn</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_ret; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Func m_func;  <span class="comment">// Function that be invoked</span></span><br><span class="line">        Ret  m_ret;   <span class="comment">// Core codes return value</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Aspect</span>&lt;void, Func, Args...&gt; :</span> NonCopyable</span><br><span class="line">    &#123;</span><br><span class="line">        Aspect(Func &amp;&amp; f) : m_func(<span class="built_in">std</span>::forward&lt;Func&gt;(f)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            aspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);  <span class="comment">// Run codes before core codes</span></span><br><span class="line">            m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">            aspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);   <span class="comment">// Run codes after core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                !has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            aspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);  <span class="comment">// Run codes before core codes</span></span><br><span class="line">            m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">        <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;</span><br><span class="line">                !has_member_Before&lt;T, Args...&gt;::value&amp;&amp;</span><br><span class="line">                has_member_After&lt;T, Args...&gt;::value&gt;::type</span><br><span class="line">        Invoke(Args &amp;&amp;... args, T &amp;&amp; aspect)</span><br><span class="line">        &#123;</span><br><span class="line">            m_func(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...); <span class="comment">// Run core codes</span></span><br><span class="line">            aspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);   <span class="comment">// Run codes after core codes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Invoke</span><span class="params">(Args &amp;&amp;... args, Head &amp;&amp; headAspect, Tail &amp;&amp;... tailAspect)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            headAspect.Before(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);</span><br><span class="line">            Invoke(<span class="built_in">std</span>::forward&lt;Args&gt;(args)..., <span class="built_in">std</span>::forward&lt;Tail&gt;(tailAspect)...);</span><br><span class="line">            headAspect.After(<span class="built_in">std</span>::forward&lt;Args&gt;(args)...);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">GetReturn</span><span class="params">()</span> </span>&#123;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Func m_func;  <span class="comment">// Function that be invoked</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> <span class="keyword">identity_t</span> = T;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AOP function, for export</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ret, <span class="keyword">typename</span>... AP, <span class="keyword">typename</span>... Args, <span class="keyword">typename</span> Func&gt;</span><br><span class="line">    <span class="function">Ret <span class="title">AOP</span><span class="params">(Func &amp;&amp; f, Args &amp;&amp;... args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Aspect&lt;Ret, Func, Args...&gt; asp(<span class="built_in">std</span>::forward&lt;Func&gt;(f));</span><br><span class="line">        asp.Invoke(<span class="built_in">std</span>::forward&lt;Args&gt;(args)..., <span class="keyword">identity_t</span>&lt;AP&gt;()...);</span><br><span class="line">        <span class="keyword">return</span> asp.GetReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> aop::AOP;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- AOP user manual ---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  If you need to add aspects to a function and then call this function,</span></span><br><span class="line"><span class="comment">  you can call the function as follows:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [func_return_value] AOP&lt;[func_return_type], [aspect_struct...]&gt;([func], [func_params...]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  [func_return_value] : the original function return value</span></span><br><span class="line"><span class="comment">  [func_return_type]  : the original function return type, "void" type would be acceptable</span></span><br><span class="line"><span class="comment">  [aspect_struct...]  : aspects list that will be added to original function</span></span><br><span class="line"><span class="comment">  [func]              : the original function pointer</span></span><br><span class="line"><span class="comment">  [func_params...]    : the original function params list</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Aspect struct needs to be coded as follows:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  struct [aspect_struct_name]</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      void Before(...)</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">          // TODO</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      void After(...)</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">          // TODO</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [vars]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      private:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [private_vars]</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------------------------*/</span></span><br></pre></td></tr></table></figure></p><p>相关测试代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AOP.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IAspect</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Before</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">After</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LogAspect</span> :</span> <span class="keyword">public</span> IAspect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Before</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"LogAspect entering"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">After</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"LogAspect leaving"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TimeElapsedAspect</span> :</span> <span class="keyword">public</span> IAspect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Before</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"TimeElapsedAspect entering"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">After</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">"TimeElapsedAspect leaving"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"foo:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"bar:"</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">doubleTime</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"doubleTime:"</span> &lt;&lt; x * y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::show()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">showDouble</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A::showDouble(double x) : "</span> &lt;&lt; x * <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    aop::AOP&lt;<span class="keyword">void</span>, LogAspect, TimeElapsedAspect&gt;(&amp;foo); <span class="comment">// 无参数</span></span><br><span class="line">    aop::AOP&lt;<span class="keyword">void</span>, LogAspect, TimeElapsedAspect&gt;(&amp;bar, <span class="number">2</span>); <span class="comment">// 有参数</span></span><br><span class="line">    <span class="keyword">auto</span> d1 = aop::AOP&lt;<span class="keyword">double</span>, LogAspect, TimeElapsedAspect&gt;(&amp;doubleTime, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 多参数及返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通函数使用绑定方式</span></span><br><span class="line">    <span class="keyword">auto</span> doubleTimeBind = <span class="built_in">std</span>::bind(doubleTime, <span class="built_in">std</span>::placeholders::_1, <span class="built_in">std</span>::placeholders::_2);</span><br><span class="line">    doubleTimeBind(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    aop::AOP&lt;<span class="keyword">double</span>, LogAspect, TimeElapsedAspect&gt;(doubleTimeBind, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数的类函数使用绑定方式</span></span><br><span class="line">    <span class="keyword">auto</span> aShowBind = <span class="built_in">std</span>::bind(&amp;A::show, a);</span><br><span class="line">    aop::AOP&lt;<span class="keyword">void</span>, LogAspect, TimeElapsedAspect&gt;(aShowBind);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数和返回值的类函数使用绑定方式</span></span><br><span class="line">    <span class="keyword">auto</span> ashowDoubleBind = <span class="built_in">std</span>::bind(&amp;A::showDouble, a, <span class="built_in">std</span>::placeholders::_1);</span><br><span class="line">    <span class="keyword">auto</span> d2 = aop::AOP&lt;<span class="keyword">double</span>, LogAspect, TimeElapsedAspect&gt;(ashowDoubleBind, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里有篇&lt;a href=&quot;http://blog.csdn.net/lanchunhui/article/details/49952087&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;介绍了C++中使用装饰模式来实现AOP，装饰器类和被装饰类
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动构造函数例子</title>
    <link href="http://yoursite.com/2018/02/05/%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2018/02/05/移动构造函数例子/</id>
    <published>2018-02-05T03:02:29.000Z</published>
    <updated>2018-02-05T03:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个使用移动构造函数的例子，在进行<code>foo = foo + bar;</code>操作时，重载的+方法返回了一个类实例，再进行赋值时没有调用拷贝赋值函数，调用移动赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/assign.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example6</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span>* ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Example6 (<span class="keyword">const</span> <span class="built_in">string</span>&amp; str) : ptr(<span class="keyword">new</span> <span class="built_in">string</span>(str)) &#123;&#125;</span><br><span class="line">    ~Example6 () &#123;<span class="keyword">delete</span> ptr;&#125;</span><br><span class="line">    <span class="comment">// 移动构造函数，参数x不能是const Pointer&amp;&amp; x，</span></span><br><span class="line">    <span class="comment">// 因为要改变x的成员数据的值；</span></span><br><span class="line">    <span class="comment">// C++98不支持，C++0x（C++11）支持</span></span><br><span class="line">    Example6 (Example6&amp;&amp; x) : ptr(x.ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        x.ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// move assignment</span></span><br><span class="line">    Example6&amp; <span class="keyword">operator</span>= (Example6&amp;&amp; x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">        ptr = x.ptr;</span><br><span class="line">        x.ptr=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// access content:</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">content</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> *ptr;&#125;</span><br><span class="line">    <span class="comment">// addition:</span></span><br><span class="line">    Example6 <span class="keyword">operator</span>+(<span class="keyword">const</span> Example6&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Example6(content()+rhs.content());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Example6 <span class="title">foo</span><span class="params">(<span class="string">"Exam"</span>)</span></span>;           <span class="comment">// 构造函数</span></span><br><span class="line">    Example6 bar = Example6(<span class="string">"ple"</span>); <span class="comment">// 移动构造函数</span></span><br><span class="line"></span><br><span class="line">    foo = foo + bar;                <span class="comment">// 移动赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"foo's content: "</span> &lt;&lt; foo.content() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下是一个使用移动构造函数的例子，在进行&lt;code&gt;foo = foo + bar;&lt;/code&gt;操作时，重载的+方法返回了一个类实例，再进行赋值时没有调用拷贝赋值函数，调用移动赋值。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL语句计算</title>
    <link href="http://yoursite.com/2018/02/01/SQL%E8%AF%AD%E5%8F%A5%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2018/02/01/SQL语句计算/</id>
    <published>2018-02-01T07:55:58.000Z</published>
    <updated>2018-02-01T08:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在SQL中也可以进行数值计算，只不过是靠select语句完成，这里举个简单的小例子。</p><ol><li>在表中选择出hosp_id为5206的item_amt之和</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(item_amt) <span class="keyword">as</span> amt5206 <span class="keyword">from</span> T_INBED_BILL_DETAIL <span class="keyword">where</span> hosp_id = <span class="number">5206</span></span><br></pre></td></tr></table></figure><ol><li><p>在表中选择出hosp_id为5230的item_amt之和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(item_amt) <span class="keyword">as</span> amt5230 <span class="keyword">from</span> T_INBED_BILL_DETAIL <span class="keyword">where</span> hosp_id = <span class="number">5230</span></span><br></pre></td></tr></table></figure></li><li><p>两者相减</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> amt5206 - amt5230 <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">sum</span>(item_amt) <span class="keyword">as</span> amt5206 <span class="keyword">from</span> T_INBED_BILL_DETAIL <span class="keyword">where</span> hosp_id = <span class="number">5206</span>), (<span class="keyword">select</span> <span class="keyword">sum</span>(item_amt) <span class="keyword">as</span> amt5230 <span class="keyword">from</span> T_INBED_BILL_DETAIL <span class="keyword">where</span> hosp_id = <span class="number">5230</span>);</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPR$0</span><br><span class="line"></span><br><span class="line">-6731308.01</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SQL中也可以进行数值计算，只不过是靠select语句完成，这里举个简单的小例子。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在表中选择出hosp_id为5206的item_amt之和&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>统计代码行数</title>
    <link href="http://yoursite.com/2018/01/25/%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/25/统计代码行数/</id>
    <published>2018-01-25T07:45:04.000Z</published>
    <updated>2018-01-25T07:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="统计每个文件的代码函数"><a href="#统计每个文件的代码函数" class="headerlink" title="统计每个文件的代码函数"></a>统计每个文件的代码函数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l</span><br></pre></td></tr></table></figure><h5 id="统计所有文件代码总行数"><a href="#统计所有文件代码总行数" class="headerlink" title="统计所有文件代码总行数"></a>统计所有文件代码总行数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs grep -v "^$"|wc -l</span><br></pre></td></tr></table></figure><p>grep -v “^$”是去掉空行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;统计每个文件的代码函数&quot;&gt;&lt;a href=&quot;#统计每个文件的代码函数&quot; class=&quot;headerlink&quot; title=&quot;统计每个文件的代码函数&quot;&gt;&lt;/a&gt;统计每个文件的代码函数&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建web开发环境</title>
    <link href="http://yoursite.com/2018/01/24/%E6%90%AD%E5%BB%BAweb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/01/24/搭建web开发环境/</id>
    <published>2018-01-24T03:13:30.000Z</published>
    <updated>2018-01-25T07:47:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天需要了解一下怎么通过后台java程序获取kylin中的数据，因此咨询了后台开发同事怎么在自己的mac os 上搭建后台开发环境，这里记录一下相关的操作过程。</p><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><ol><li>通过在终端中输入<code>java -version</code>命令判断是否已存在java环境和版本。</li><li>若需要更换java sdk，可参考官网文章<a href="https://www.java.com/zh_CN/download/help/mac_uninstall_java.xml" target="_blank" rel="noopener">如何在 Mac 上卸载 Java</a>。<br>简单来说执行以下命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span><br><span class="line">sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPane</span><br><span class="line">sudo rm -fr ~/Library/Application\ Support/Java</span><br></pre></td></tr></table></figure></li></ol><p>卸载完后，要从finder中进入 <code>/Library/Java/JavaVirtualMachines</code>, 删除其中内容，这样才算彻底卸载完成。</p><ol><li>从Oracle<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网</a>上下载相应的SDK，注意要选择对应mac os版本的安装包，按照默认设置一路安装下去就可。安装后通过<code>java -version</code>命令判断是否安装成功。</li></ol><h4 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h4><p>后面我们选择的是IntelliJ IDEA作为开发工具，IDEA本身携带了一个版本的maven工具，因此这里有两种方式：使用IDEA自带的或下载自行安装，这里推荐新手使用IDEA自带maven版本，但无论哪种方式都建议配置settings.xml，配置国内镜像源以便获得更快的下载速度。</p><h5 id="方案一-自行下载安装"><a href="#方案一-自行下载安装" class="headerlink" title="方案一 自行下载安装"></a>方案一 自行下载安装</h5><ol><li>从Maven<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网</a>上下载最新的maven包，这里下载的包名为apache-maven-3.5.2-bin.tar.gz。</li><li><p>通过如下命令安装到<code>/usr/local</code>下，并将目录改名为maven（这里只考虑只存留一个maven版本）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-maven-3.5.2-bin.tar.gz -C ~/Library</span><br><span class="line">sudo mv ~/Library/apache-maven-3.5.2/ ~/Library/maven</span><br></pre></td></tr></table></figure></li><li><p>在maven主目录中创建<code>/m2/repository</code>目录用于存放下载的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cd ~/Librarys/maven/</span><br><span class="line">sudo mkdir -p ./m2/repository</span><br></pre></td></tr></table></figure></li><li><p>修改conf目录下的settings.xml文件，添加存放的下载包目录以及系在包目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/settings.xml</span><br></pre></td></tr></table></figure></li></ol><p>在<code>localRepository</code>节点填入刚创建的<code>/m2/repository</code>全路径<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven/m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>servers</code>节点下添加私服配置信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>mirrors</code>节点下添加共有服务器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>mirrors</code>节也可以添加私服<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://XXX.XXX.XXX.XXX:XXXX/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>若添加私服需要在<code>servers</code>节点下添加私服配置信息，注意id节点内容要匹配<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>在IntelliJ IDEA中点击快捷键<code>⌘ + ,</code>调出Default Preference界面，在<code>Build,Execution,Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Maven</code> -&gt; <code>Maven home directory</code> 选择maven的主目录，勾选<code>User settings file:</code>的override复选框并选择maven主目录中conf目录下的settings.xml，勾选<code>Local repository</code>的override复选框并选择刚才我们在maven主目录中下新创建的<code>/m2/repository</code>目录。</li></ol><h5 id="方案二-IDEA自带配置（推荐）"><a href="#方案二-IDEA自带配置（推荐）" class="headerlink" title="方案二 IDEA自带配置（推荐）"></a>方案二 IDEA自带配置（推荐）</h5><ol><li>IDEA 安装后直接可以使用maven，默认情况下settings.xml和repository均放在<code>~/Library/.m2/</code>路径下，无需修改即可使用，但若要像方案一中使用配置获得更快下载镜像的话，可以将方案一中的第4步产生的settings.xml文件中的<code>localRepository</code>节点修改为’./repository’。</li><li>在IntelliJ IDEA中点击快捷键<code>⌘ + ,</code>调出Default Preference界面，在<code>Build,Execution,Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Maven</code> -&gt; <code>Maven home directory</code> 中勾选<code>User settings file:</code>的override复选框并选择<code>~/Library/.m2/</code>目录下的settings.xml即可。</li></ol><p><img src="../images/2018-01-24_16-18-33.png" alt=""></p><h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h4><ol><li>从<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">官网</a>下载Tomcat包，这里选用的包是apache-tomcat-8.5.27.tar.gz</li><li>通过如下命令安装到/usr/local下，并将目录改名为tomcat（这里只考虑只存留一个tomcat版本）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-tomcat-8.5.27.tar.gz -C ~/Library/</span><br><span class="line">sudo mv ~/Library/apache-tomcat-8.5.27/ ~/Library/Tomcat</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置IntelliJ-IDEA"><a href="#配置IntelliJ-IDEA" class="headerlink" title="配置IntelliJ IDEA"></a>配置IntelliJ IDEA</h4><ol><li>从<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a>下载IDEA，按照默认方式安装并激活即可。</li><li>新建一个项目，选择Maven项目。</li><li>点击<code>⌘+;</code>，选择Moudles，点击加号创建一个Web模块，配置Path路径中的加载地址。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天需要了解一下怎么通过后台java程序获取kylin中的数据，因此咨询了后台开发同事怎么在自己的mac os 上搭建后台开发环境，这里记录一下相关的操作过程。&lt;/p&gt;
&lt;h4 id=&quot;安装JDK&quot;&gt;&lt;a href=&quot;#安装JDK&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="web tomcat 后台" scheme="http://yoursite.com/tags/web-tomcat-%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>在spark中使用kylin-jdbc连接cube</title>
    <link href="http://yoursite.com/2018/01/23/%E5%9C%A8spark%E4%B8%AD%E4%BD%BF%E7%94%A8kylin-jdbc%E8%BF%9E%E6%8E%A5cube/"/>
    <id>http://yoursite.com/2018/01/23/在spark中使用kylin-jdbc连接cube/</id>
    <published>2018-01-23T03:26:04.000Z</published>
    <updated>2018-01-23T03:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>加载kylin的jdbc库<br><code>spark-shell --jars kylin-jdbc-2.2.0.jar</code></li><li>导入jdbc库<br><code>import org.apache.kylin.jdbc.Driver</code></li><li>代码加载jdbc库<br><code>val jdbcDriver = new Driver</code></li><li>导入Properties类<br><code>import java.util.Properties</code></li><li><p>创建属性</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = <span class="keyword">new</span> <span class="type">Properties</span></span><br><span class="line">info.put(<span class="string">"user"</span>, <span class="string">"ADMIN"</span>)</span><br><span class="line">info.put(<span class="string">"password"</span>, <span class="string">"KYLIN"</span>)</span><br></pre></td></tr></table></figure></li><li><p>连接<br><code>val conn = jdbcDriver.connect(&quot;jdbc:kylin://192.168.2.241:7070/learn_kylin&quot;, info)</code></p></li><li>创建State<br><code>val state = conn.createStatement</code></li><li>查询<br><code>val resultSet = state.executeQuery(&quot;select * from kylin_sales&quot;)</code></li><li>检索下一条<br><code>resultSet.next()</code></li><li>获得第一列内容<br><code>resultSet.getString(1)</code> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;加载kylin的jdbc库&lt;br&gt;&lt;code&gt;spark-shell --jars kylin-jdbc-2.2.0.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导入jdbc库&lt;br&gt;&lt;code&gt;import org.apache.kylin.jdbc.Driver
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于余弦角度的相似度计算</title>
    <link href="http://yoursite.com/2018/01/22/%E5%9F%BA%E4%BA%8E%E4%BD%99%E5%BC%A6%E8%A7%92%E5%BA%A6%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2018/01/22/基于余弦角度的相似度计算/</id>
    <published>2018-01-22T02:07:14.000Z</published>
    <updated>2018-01-22T05:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>余弦角度计算公式如下</p><p><img src="../images/2018-01-22_13-33-59.png" alt=""></p><p>以下是不同用户对电影进行评分，根据评分计算用户aaa与其他用户选择的相似度，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Map</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AppDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组织数据</span></span><br><span class="line">    <span class="keyword">val</span> source = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]]()</span><br><span class="line">    <span class="keyword">val</span> fileSource = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSource</span></span>(): <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] = &#123;</span><br><span class="line">      <span class="keyword">val</span> user1FilmSource = <span class="type">Map</span>(<span class="string">"smzdm"</span> -&gt; <span class="number">2</span>,<span class="string">"ylxb"</span> -&gt; <span class="number">3</span>,<span class="string">"znh"</span> -&gt; <span class="number">1</span>,<span class="string">"nhsc"</span> -&gt; <span class="number">0</span>,<span class="string">"fcwr"</span> -&gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">val</span> user2FilmSource = <span class="type">Map</span>(<span class="string">"smzdm"</span> -&gt; <span class="number">1</span>,<span class="string">"ylxb"</span> -&gt; <span class="number">2</span>,<span class="string">"znh"</span> -&gt; <span class="number">2</span>,<span class="string">"nhsc"</span> -&gt; <span class="number">1</span>,<span class="string">"fcwr"</span> -&gt; <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">val</span> user3FilmSource = <span class="type">Map</span>(<span class="string">"smzdm"</span> -&gt; <span class="number">2</span>,<span class="string">"ylxb"</span> -&gt; <span class="number">1</span>,<span class="string">"znh"</span> -&gt; <span class="number">0</span>,<span class="string">"nhsc"</span> -&gt; <span class="number">1</span>,<span class="string">"fcwr"</span> -&gt; <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">val</span> user4FilmSource = <span class="type">Map</span>(<span class="string">"smzdm"</span> -&gt; <span class="number">3</span>,<span class="string">"ylxb"</span> -&gt; <span class="number">2</span>,<span class="string">"znh"</span> -&gt; <span class="number">0</span>,<span class="string">"nhsc"</span> -&gt; <span class="number">5</span>,<span class="string">"fcwr"</span> -&gt; <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">val</span> user5FilmSource = <span class="type">Map</span>(<span class="string">"smzdm"</span> -&gt; <span class="number">5</span>,<span class="string">"ylxb"</span> -&gt; <span class="number">3</span>,<span class="string">"znh"</span> -&gt; <span class="number">1</span>,<span class="string">"nhsc"</span> -&gt; <span class="number">1</span>,<span class="string">"fcwr"</span> -&gt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">      source += (<span class="string">"aaa"</span> -&gt; user1FilmSource)<span class="comment">//对人名进行存储</span></span><br><span class="line">      source += (<span class="string">"bbb"</span> -&gt; user2FilmSource) <span class="comment">//对人名进行存储</span></span><br><span class="line">      source += (<span class="string">"ccc"</span> -&gt; user3FilmSource) <span class="comment">//对人名进行存储</span></span><br><span class="line">      source += (<span class="string">"ddd"</span> -&gt; user4FilmSource) <span class="comment">//对人名进行存储</span></span><br><span class="line">      source += (<span class="string">"eee"</span> -&gt; user5FilmSource) <span class="comment">//对人名进行存储</span></span><br><span class="line"></span><br><span class="line">      source</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCollaborateSource</span></span>(user1 : <span class="type">String</span>, user2 : <span class="type">String</span>) : <span class="type">Double</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> user1FilmSource = source(user1).values.toVector</span><br><span class="line">      <span class="keyword">val</span> user2FilmSource = source(user2).values.toVector</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> member = user1FilmSource.zip(user2FilmSource).map(d =&gt; d._1 * d._2).sum.toDouble</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> temp1 = math.sqrt(user1FilmSource.map(num =&gt; &#123;</span><br><span class="line">        math.pow(num, <span class="number">2</span>)</span><br><span class="line">      &#125;).sum)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> temp2 = math.sqrt(user2FilmSource.map(num =&gt; &#123;</span><br><span class="line">        math.pow(num, <span class="number">2</span>)</span><br><span class="line">      &#125;).sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> denominator = temp1 * temp2</span><br><span class="line"></span><br><span class="line">      member / denominator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    getSource()</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"aaa"</span></span><br><span class="line">    <span class="keyword">val</span> score = getCollaborateSource(name, <span class="string">"aaa"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> users = <span class="type">Array</span>(<span class="string">"aaa"</span>,<span class="string">"bbb"</span>,<span class="string">"ccc"</span>,<span class="string">"ddd"</span>,<span class="string">"eee"</span>)       <span class="comment">//设置用户</span></span><br><span class="line"></span><br><span class="line">    users.foreach(user =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">val</span> score = getCollaborateSource(name, user)</span><br><span class="line">      println(name + <span class="string">"相对于"</span> + user + <span class="string">"的相似分数是 "</span> + score)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;余弦角度计算公式如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/2018-01-22_13-33-59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是不同用户对电影进行评分，根据评分计算用户aaa与其他用户选择的相似度，代码如下：&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Clion配置Boost</title>
    <link href="http://yoursite.com/2018/01/20/%E4%BD%BF%E7%94%A8Clion%E9%85%8D%E7%BD%AEBoost/"/>
    <id>http://yoursite.com/2018/01/20/使用Clion配置Boost/</id>
    <published>2018-01-20T02:47:18.000Z</published>
    <updated>2018-01-20T03:33:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在mac os平台下，使用Clion整合</p><ol><li><p>从<a href="http://www.boost.org" target="_blank" rel="noopener">Boost官网</a>下载boost库，这里下载的是文件是boost_1_65_1.tar.gz。</p></li><li><p>使用如下命令进行解压缩<br><code>tar -zxvf boost_1_65_1.tar.gz</code></p></li><li><p>进入目录，执行如下命令进行配置<br><code>./bootstrap.sh</code><br>该命令默认会将头文件安装到<code>/usr/local/include</code>中，库安装到<code>/usr/local/lib</code>中。若要指定其他目录可用”–prefix=xxx’”指定。</p></li><li><p>然后执行<code>./b2 install</code>进行编译，编译后会将头文件和库放置到指定目录中。</p></li><li><p>打开CLion 创建新项目，由于CLion是靠cmake进行编译，因此需要我们手工配置一下，打开项目的CMakeLists.txt文件，填入如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.9)</span><br><span class="line">project(HelloWorld)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 11)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set(Boost_USE_STATIC_LIBS ON)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span>(Boost_USE_STATIC_LIBS ON)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span>(Boost_USE_MULTITHREADED ON)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span>(Boost_USE_STATIC_RUNTIME OFF)</span></span><br><span class="line"></span><br><span class="line">find_package(Boost  REQUIRED COMPONENTS</span><br><span class="line"><span class="meta">#</span><span class="bash">        regex</span></span><br><span class="line">        filesystem</span><br><span class="line">        system</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(NOT Boost_FOUND)</span><br><span class="line">    message("未发现Boost")</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"><span class="meta">include_directories($</span><span class="bash">&#123;Boost_INCLUDE_DIRS&#125;</span></span><br><span class="line">        #  /opt/boost/lib</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_executable(HelloWorld main.cpp)</span><br><span class="line">target_link_libraries(HelloWorld $&#123;Boost_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置好后可以写个依赖库的C++程序测试一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/filesystem.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/shared_ptr.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/timer.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/process.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/gregorian/gregorian.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    boost::timer t;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t.elapsed() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        boost::filesystem::<span class="function">path <span class="title">path1</span><span class="params">(<span class="string">"/usr/local/include"</span>)</span></span>; <span class="comment">// random pathname</span></span><br><span class="line">        boost::filesystem::path::iterator pathI = path1.begin();</span><br><span class="line">        <span class="keyword">while</span> (pathI != path1.end())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pathI &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            ++pathI;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; a(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>));</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = a.begin(); i != a.end(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">double</span>&gt; z(<span class="keyword">new</span> <span class="keyword">double</span>(<span class="number">3.0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t.elapsed() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在mac os平台下，使用Clion整合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从&lt;a href=&quot;http://www.boost.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Boost官网&lt;/a&gt;下载boost库，这里下载的是文件是boost_1_
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jetbrains公司系列产品激活方式</title>
    <link href="http://yoursite.com/2018/01/19/jetbrains%E5%85%AC%E5%8F%B8%E7%B3%BB%E5%88%97%E4%BA%A7%E5%93%81%E6%BF%80%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/01/19/jetbrains公司系列产品激活方式/</id>
    <published>2018-01-19T03:00:17.000Z</published>
    <updated>2018-02-01T10:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>jetbrains公司系列产品激活有三种方式</p><h4 id="购买正版"><a href="#购买正版" class="headerlink" title="购买正版"></a>购买正版</h4><p>如果有资金还是最好购买正版</p><h4 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h4><ol><li><p>下载破解补丁JetbrainsCrack-2.6.10-release-enc.jar<br>链接:<a href="https://pan.baidu.com/s/1pMAU7px" target="_blank" rel="noopener">https://pan.baidu.com/s/1pMAU7px</a>  密码:5p3j</p></li><li><p>将该jar包拷贝到idea安装目录中，如果是windows的话和idea64.exe.vmoptions或idea.exe.vmoptions文件同级目录，如果是mac的话和idea.vmoptions同级目录。</p></li><li><p>修改.vmoptionst文件，在最后一行添加如下内容</p></li></ol><p><code>-javaagent:./JetbrainsCrack-2.6.10-release-enc.jar</code></p><ol><li><p>启动软件，在激活窗口中选择使用Activation code, 在激活窗口中填入如下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ThisCrackLicenseId-&#123;  </span><br><span class="line">"licenseId":"ThisCrackLicenseId",  </span><br><span class="line">"licenseeName":"idea",  </span><br><span class="line">"assigneeName":"",  </span><br><span class="line">"assigneeEmail":"idea@163.com",  </span><br><span class="line">"licenseRestriction":"For This Crack, Only Test! Please support genuine!!!",  </span><br><span class="line">"checkConcurrentUse":false,  </span><br><span class="line">"products":[  </span><br><span class="line">&#123;"code":"II","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"DM","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"AC","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"RS0","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"WS","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"DPN","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"RC","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"PS","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"DC","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"RM","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;"code":"CL","paidUpTo":"2099-12-31"&#125;,  </span><br><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"PC"</span>,<span class="attr">"paidUpTo"</span>:<span class="string">"2099-12-31"</span>&#125;  </span><br><span class="line">],  </span><br><span class="line">"hash":"2911276/0",  </span><br><span class="line">"gracePeriodDays":7,  </span><br><span class="line">"autoProlongated":false&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击激活即可。注意该方法在CLion 2017.3.3 版本中失效。CLion 2017.3.2版本可从<a href="https://download.jetbrains.8686c.com/cpp/CLion-2017.3.2.dmg" target="_blank" rel="noopener">这里</a>下载。</p></li></ol><h4 id="在线激活"><a href="#在线激活" class="headerlink" title="在线激活"></a>在线激活</h4><p>该方式需要联网使用注册服务器激活，在激活窗口中选择使用服务器激活，可填入如下激活服务器地址，若不起作用，可去除末尾”/“后再试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http://xidea.online</span><br><span class="line"></span><br><span class="line">http://intellij.mandroid.cn/</span><br><span class="line"></span><br><span class="line">http://idea.imsxm.com/</span><br><span class="line"></span><br><span class="line">http://idea.iteblog.com/key.php</span><br></pre></td></tr></table></figure><p>若以上服务器仍无法激活，可自行搭建注册激活服务器。通过如下地址下载服务器程序IntelliJIDEALicenseServer(v1.5).tar.gz。<br>链接:<a href="https://pan.baidu.com/s/1i6p2eUT" target="_blank" rel="noopener">https://pan.baidu.com/s/1i6p2eUT</a>  密码:amvs</p><p>下载后解压缩，选择相应平台的程序执行，根据产生的服务器地址，填入到激活服务器地址栏中即可，注意端口也需要填入。</p><p>使用服务器激活有时间限制，过一段时间后需要重新激活，因此最好将该激活服务器设置在内网中的某台服务器启动服务中。</p><p>ref:<br><a href="http://blog.csdn.net/yangying496875002/article/details/73603303" target="_blank" rel="noopener">Windows7下安装与破解IntelliJ IDEA2017 - CSDN博客</a><br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 注册码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jetbrains公司系列产品激活有三种方式&lt;/p&gt;
&lt;h4 id=&quot;购买正版&quot;&gt;&lt;a href=&quot;#购买正版&quot; class=&quot;headerlink&quot; title=&quot;购买正版&quot;&gt;&lt;/a&gt;购买正版&lt;/h4&gt;&lt;p&gt;如果有资金还是最好购买正版&lt;/p&gt;
&lt;h4 id=&quot;激活码&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/19/hello-world/"/>
    <id>http://yoursite.com/2018/01/19/hello-world/</id>
    <published>2018-01-19T02:23:02.000Z</published>
    <updated>2018-01-19T02:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
